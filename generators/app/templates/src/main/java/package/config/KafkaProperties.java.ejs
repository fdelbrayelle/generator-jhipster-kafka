<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

import java.util.HashMap;
import java.util.Map;

@Configuration
@ConfigurationProperties(prefix = "kafka")
public class KafkaProperties {

    private String bootStrapServers = "localhost:9092";

    private Map<String, Map<String, Object>> consumer = new HashMap<>();

    private Map<String, Map<String, Object>> producer = new HashMap<>();

    public String getBootStrapServers() {
        return bootStrapServers;
    }

    public void setBootStrapServers(String bootStrapServers) {
        this.bootStrapServers = bootStrapServers;
    }

    private void addBootstrapServers(Map<String, Object> properties) {
        if (!properties.containsKey("bootstrap.servers")) {
            properties.put("bootstrap.servers", this.bootStrapServers);
        }
    }

    public Map<String, Object> getConsumerConfiguration(final String consumerName) {
        Map<String, Object> properties = consumer.get(consumerName);
        addBootstrapServers(properties);
        return properties;
    }

    public Map<String, Object> getProducerConfiguration(final String producerName) {
        Map<String, Object> properties = producer.get(producerName);
        addBootstrapServers(properties);
        return properties;
    }

    public Map<String, Object> getConsumer() {
        Map<String, Object> properties = new HashMap<>(this.consumer);
        addBootstrapServers(properties);
        return properties;
    }

    public void setConsumer(Map<String, Map<String, Object>> consumer) {
        this.consumer = consumer;
    }

    public Map<String, Object> getProducer() {
        Map<String, Object> properties = new HashMap<>(this.producer);
        addBootstrapServers(properties);
        return properties;
    }

    public void setProducer(Map<String, Map<String, Object>> producer) {
        this.producer = producer;
    }
}
