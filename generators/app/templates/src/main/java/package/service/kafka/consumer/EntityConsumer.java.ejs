<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.service.kafka.consumer;

import io.vavr.control.Either;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.core.task.SimpleAsyncTaskExecutor;
import org.springframework.stereotype.Service;
import <%= packageName %>.config.KafkaProperties;
<%_ if (type !== 'String') { _%>
import <%= packageName %>.domain.<%= entityClass %>;
<%_ } _%>
import <%= packageName %>.service.kafka.GenericConsumer;
import <%= packageName %>.service.kafka.deserializer.DeserializationError;

@Service
public class <%= entityClass %>Consumer extends GenericConsumer<<%= type %>> {

    private final Logger log = LoggerFactory.getLogger(<%= entityClass %>Consumer.class);

    public <%= entityClass %>Consumer(@Value("${kafka.consumer.<%= camelCaseEntityClass %>.name}") final String topicName, final KafkaProperties kafkaProperties) {
        super(topicName, kafkaProperties.getConsumer().get("<%= camelCaseEntityClass %>"), kafkaProperties.getPollingTimeout());
    }

    @Override
    protected void handleMessage(final ConsumerRecord<String, Either<DeserializationError, <%= type %>>> record) {
        final Either<DeserializationError, <%= type %>> value = record.value();
        if (value.isLeft()) {
            log.error("Deserialization record failure: {}", value.getLeft());
        } else {
            // Maybe you could delete the next log.info(...) to avoid disclosing personal user information
            log.info("Handling record: {}", value.get());
        }

        // TODO: Here is where you can handle your messages
    }

    @Bean
    public void executeKafka<%= entityClass %>Runner() {
        new SimpleAsyncTaskExecutor().execute(this);
    }
}
